plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'com.avast.gradle.docker-compose' version '0.8.14'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.14'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.7'
    testImplementation 'org.testcontainers:testcontainers:1.14.1'
    testImplementation 'org.springframework.security:spring-security-test:5.3.1.RELEASE'
    testImplementation 'org.awaitility:awaitility:4.0.2'
    testImplementation 'org.mock-server:mockserver-netty:5.10.0'
}

sourceSets {
    integration {
        java.srcDir 'src/test/integration/java'
        resources.srcDir 'src/test/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }

    unit {
        java.srcDir 'src/test/unit/java'
        resources.srcDir 'src/test/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }

    acceptance {
        java.srcDir 'src/test/acceptance/java'
        resources.srcDir 'src/test/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }

    e2e {
        java.srcDir 'src/test/e2e/java'
        resources.srcDir 'src/test/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    unitImplementation.extendsFrom testImplementation
    acceptanceImplementation.extendsFrom testImplementation
    e2eImplementation.extendsFrom testImplementation
}

task testUnit(type: Test, group: 'verification') {
    testClassesDirs = sourceSets.unit.output.classesDirs
    classpath = sourceSets.unit.runtimeClasspath
    useJUnitPlatform()
}

task testIntegration(type: Test, group: 'verification') {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    useJUnitPlatform()
}

task testAcceptance(type: Test, group: 'verification') {
    testClassesDirs = sourceSets.acceptance.output.classesDirs
    classpath = sourceSets.acceptance.runtimeClasspath
    useJUnitPlatform()
}

task testE2E(type: Test, group: 'verification') {
    testClassesDirs = sourceSets.e2e.output.classesDirs
    classpath = sourceSets.e2e.runtimeClasspath
    useJUnitPlatform()
}

test {
    dependsOn testUnit
    dependsOn testIntegration
    dependsOn testAcceptance
    dependsOn testE2E
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml']
    startedServices = ['rabbitmq']
    waitForTcpPorts = true
    captureContainersOutput = true
    stopContainers = true
    removeContainers = true
    removeOrphans = true
}

bootRun {
    dependsOn 'composeUp'
}